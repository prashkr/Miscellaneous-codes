#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include<cstring>

using namespace std;

int array[55][55];
int R;
int C;
int d;
class GooseInZooDivTwo {
public:
	
	int abs(int val)
	{
		if(val>0)
			return val;
		else return (-val);
	}
	
	
	void DFS(vector<string>& field, int i, int j)
	{
		array[i][j]=1;
		int r=0;
		int c=0;
		for(r=0;r<R;r++)
		{
			for(c=0;c<C;c++)
			{
				if(array[r][c]!=1 && (abs(i-r)+abs(j-c))<=d && field[i][j]!='.')
					DFS(field, r, c);
			}
		}
	}

	int count(vector <string> field, int dist) {
		int i;
		int j;
		int count=0;
		
		memset(array, 0, sizeof(array));
		
		R=field.size();
		C=field[0].size();
		d=dist;
		for(i=0;i<R;i++)
		{
			for(j=0;j<C;j++)
			{
				if(array[i][j]) continue;
				if(field[i][j]=='.') continue;
				
				count++;
				DFS(field, i, j);
			}
			
		}
		int ans=1;
		for(i=0;i<count;i++)
		{
			ans=(ans*2)%1000000007;
		}
		ans = (ans-1+1000000007)%1000000007;
		return ans;
		
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	GooseInZooDivTwo *obj;
	int answer;
	obj = new GooseInZooDivTwo();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"vvv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	p2 = 7;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 100;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"vvv"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"v.v..................v............................",".v......v..................v.....................v","..v.....v....v.........v...............v......v...",".........vvv...vv.v.........v.v..................v",".....v..........v......v..v...v.......v...........","...................vv...............v.v..v.v..v...",".v.vv.................v..............v............","..vv.......v...vv.v............vv.....v.....v.....","....v..........v....v........v.......v.v.v........",".v.......v.............v.v..........vv......v.....","....v.v.......v........v.....v.................v..","....v..v..v.v..............v.v.v....v..........v..","..........v...v...................v..............v","..v........v..........................v....v..v...","....................v..v.........vv........v......","..v......v...............................v.v......","..v.v..............v........v...............vv.vv.","...vv......v...............v.v..............v.....","............................v..v.............."
			"...v",".v.............v.......v..........................","......v...v........................v..............",".........v.....v..............vv..................","................v..v..v.........v....v.......v....","........v.....v.............v......v.v............","...........v....................v.v....v.v.v...v..","...........v......................v...v...........","..........vv...........v.v.....................v..",".....................v......v............v...v....",".....vv..........................vv.v.....v.v.....",".vv.......v...............v.......v..v.....v......","............v................v..........v....v....","................vv...v............................","................v...........v........v...v....v...","..v...v...v.............v...v........v....v..v....","......v..v.......v........v..v....vv..............","...........v..........v........v.v................","v.v......v................v....................v..",".v........v............................."
			"...v......","............................v...v.......v.........","........................vv.v..............v...vv..",".......................vv........v.............v..","...v.............v.........................v......","....v......vv...........................v.........","....vv....v................v...vv..............v..","..................................................","vv........v...v..v.....v..v..................v....",".........v..............v.vv.v.............v......",".......v.....v......v...............v.............","..v..................v................v....v......",".....v.....v.....................v.v......v......."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 797922654;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Crow Keith is looking at the goose cage in the zoo.
// The bottom of the cage is divided into a grid of square cells.
// There are some birds sitting on those cells (with at most one bird per cell).
// Some of them are geese and all the others are ducks.
// 
// Keith wants to know which birds are geese.
// He knows the following facts about them:
// 
// There is at least one goose in the cage.
// Each bird within Manhattan distance dist of any goose is also a goose.
// 
//  
// You are given a vector <string> field and the int dist.
// The array field describes the bottom of the cage.
// Each character of each element of field describes one of the cells.
// The meaning of individual characters follows.
// 
// The character 'v' represents a cell that contains a bird.
// The character '.' represents an empty cell.
// 
// 
// Return the number of possible sets of geese in the cage, modulo 1,000,000,007.
// Note that for some of the test cases there can be no possible sets of geese.
// 
// DEFINITION
// Class:GooseInZooDivTwo
// Method:count
// Parameters:vector <string>, int
// Returns:int
// Method signature:int count(vector <string> field, int dist)
// 
// 
// NOTES
// -The Manhattan distance between cells (a,b) and (c,d) is |a-c| + |b-d|, where || denotes absolute value. In words, the Manhattan distance is the smallest number of steps needed to get from one cell to the other, given that in each step you can move to a cell that shares a side with your current cell.
// 
// 
// CONSTRAINTS
// -field will contain between 1 and 50 elements, inclusive.
// -Each element of field will contain between 1 and 50 characters, inclusive.
// -Each element of field will contain the same number of characters.
// -Each character of each element of field will be 'v' or '.'.
// -dist will be between 0 and 100, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {"vvv"}
// 0
// 
// Returns: 7
// 
// There are seven possible sets of positions of geese: "ddg", "dgd", "dgg", "gdd", "gdg", "ggd", "ggg" ('g' are geese and 'd' are ducks).
// 
// 1)
// {"."}
// 100
// 
// Returns: 0
// 
// The number of geese must be positive, but there are no birds in the cage.
// 
// 2)
// {"vvv"}
// 1
// 
// Returns: 1
// 
// 
// 
// 3)
// {"v.v..................v............................"
// ,".v......v..................v.....................v"
// ,"..v.....v....v.........v...............v......v..."
// ,".........vvv...vv.v.........v.v..................v"
// ,".....v..........v......v..v...v.......v..........."
// ,"...................vv...............v.v..v.v..v..."
// ,".v.vv.................v..............v............"
// ,"..vv.......v...vv.v............vv.....v.....v....."
// ,"....v..........v....v........v.......v.v.v........"
// ,".v.......v.............v.v..........vv......v....."
// ,"....v.v.......v........v.....v.................v.."
// ,"....v..v..v.v..............v.v.v....v..........v.."
// ,"..........v...v...................v..............v"
// ,"..v........v..........................v....v..v..."
// ,"....................v..v.........vv........v......"
// ,"..v......v...............................v.v......"
// ,"..v.v..............v........v...............vv.vv."
// ,"...vv......v...............v.v..............v....."
// ,"............................v..v.................v"
// ,".v.............v.......v.........................."
// ,"......v...v........................v.............."
// ,".........v.....v..............vv.................."
// ,"................v..v..v.........v....v.......v...."
// ,"........v.....v.............v......v.v............"
// ,"...........v....................v.v....v.v.v...v.."
// ,"...........v......................v...v..........."
// ,"..........vv...........v.v.....................v.."
// ,".....................v......v............v...v...."
// ,".....vv..........................vv.v.....v.v....."
// ,".vv.......v...............v.......v..v.....v......"
// ,"............v................v..........v....v...."
// ,"................vv...v............................"
// ,"................v...........v........v...v....v..."
// ,"..v...v...v.............v...v........v....v..v...."
// ,"......v..v.......v........v..v....vv.............."
// ,"...........v..........v........v.v................"
// ,"v.v......v................v....................v.."
// ,".v........v................................v......"
// ,"............................v...v.......v........."
// ,"........................vv.v..............v...vv.."
// ,".......................vv........v.............v.."
// ,"...v.............v.........................v......"
// ,"....v......vv...........................v........."
// ,"....vv....v................v...vv..............v.."
// ,".................................................."
// ,"vv........v...v..v.....v..v..................v...."
// ,".........v..............v.vv.v.............v......"
// ,".......v.....v......v...............v............."
// ,"..v..................v................v....v......"
// ,".....v.....v.....................v.v......v......."}
// 3
// 
// Returns: 797922654
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
